// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Robert;

import org.usfirst.frc841.Robert.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton setHighGear1;
    public JoystickButton setQuickTurn6;
    public JoystickButton stopQuickTurn6;
    public JoystickButton setLowGear2;
    public Joystick driver;
    public JoystickButton grabposition7;
    public JoystickButton capBin8;
    public JoystickButton bringInTote2;
    public JoystickButton openIntakes1;
    public JoystickButton spitOutTote4;
    public JoystickButton closeIntakes3;
    public JoystickButton placeStackDown11;
    public JoystickButton pickUpTote12;
    public JoystickButton openClaw6;
    public JoystickButton closeClaw5;
    public Joystick coDriver;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        coDriver = new Joystick(1);
        
        closeClaw5 = new JoystickButton(coDriver, 5);
        closeClaw5.whileHeld(new CloseClaw());
        openClaw6 = new JoystickButton(coDriver, 6);
        openClaw6.whileHeld(new OpenClaw());
        pickUpTote12 = new JoystickButton(coDriver, 12);
        pickUpTote12.whenPressed(new PickUpTote());
        placeStackDown11 = new JoystickButton(coDriver, 11);
        placeStackDown11.whenPressed(new PlaceStackDown());
        closeIntakes3 = new JoystickButton(coDriver, 3);
        closeIntakes3.whileHeld(new HoldTote());
        spitOutTote4 = new JoystickButton(coDriver, 4);
        spitOutTote4.whileHeld(new SpitOutTote());
        openIntakes1 = new JoystickButton(coDriver, 1);
        openIntakes1.whileHeld(new ReleaseTote());
        bringInTote2 = new JoystickButton(coDriver, 2);
        bringInTote2.whileHeld(new SuckTote());
        capBin8 = new JoystickButton(coDriver, 8);
        capBin8.whileHeld(new StackBinFromBack());
        grabposition7 = new JoystickButton(coDriver, 7);
        grabposition7.whileHeld(new ReadyToGrabBinBackside());
        driver = new Joystick(0);
        
        setLowGear2 = new JoystickButton(driver, 2);
        setLowGear2.whileHeld(new SetLowGear());
        stopQuickTurn6 = new JoystickButton(driver, 6);
        stopQuickTurn6.whenReleased(new StopQuickTurn());
        setQuickTurn6 = new JoystickButton(driver, 6);
        setQuickTurn6.whenPressed(new SetQuickTurn());
        setHighGear1 = new JoystickButton(driver, 1);
        setHighGear1.whileHeld(new SetHighGear());

	    
        // SmartDashboard Buttons
        SmartDashboard.putData("CoOpertitionStack", new CoOpertitionStack());

        SmartDashboard.putData("StackBinFromBack", new StackBinFromBack());

        SmartDashboard.putData("DriveStop", new DriveStop());

        SmartDashboard.putData("DriveMoveForward", new DriveMoveForward());

        SmartDashboard.putData("PlaceBinOn5Stack", new PlaceBinOn5Stack());

        SmartDashboard.putData("ReadyToGrabBinBackside", new ReadyToGrabBinBackside());

        SmartDashboard.putData("SuckTote", new SuckTote());

        SmartDashboard.putData("SetLowGear", new SetLowGear());

        SmartDashboard.putData("SetHighGear", new SetHighGear());

        SmartDashboard.putData("PickUpTote", new PickUpTote());

        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());

        SmartDashboard.putData("Drive", new Drive());

        SmartDashboard.putData("SetQuickTurn", new SetQuickTurn());

        SmartDashboard.putData("StopQuickTurn", new StopQuickTurn());

        SmartDashboard.putData("BringInTote", new BringInTote());

        SmartDashboard.putData("SpitOutTote", new SpitOutTote());

        SmartDashboard.putData("ReleaseTote", new ReleaseTote());

        SmartDashboard.putData("HoldTote", new HoldTote());

        SmartDashboard.putData("ElevatorSetpoint", new ElevatorSetpoint());

        SmartDashboard.putData("ManualSpitOutTote", new ManualSpitOutTote());

        SmartDashboard.putData("PlaceStackDown", new PlaceStackDown());

        SmartDashboard.putData("manualsuckTote", new manualsuckTote());

        SmartDashboard.putData("OpenPincer", new OpenPincer());

        SmartDashboard.putData("ClosePincer", new ClosePincer());

        SmartDashboard.putData("DrivingWithTote", new DrivingWithTote());

        SmartDashboard.putData("HumanStackerUp", new HumanStackerUp());

        SmartDashboard.putData("PutStackOnScoringPlatform", new PutStackOnScoringPlatform());

        SmartDashboard.putData("PutStackOnStep", new PutStackOnStep());

        SmartDashboard.putData("OpenClaw", new OpenClaw());

        SmartDashboard.putData("AutonomousRecyclingBinDrive", new AutonomousRecyclingBinDrive());

        SmartDashboard.putData("CloseClaw", new CloseClaw());

        SmartDashboard.putData("ManualTilt", new ManualTilt());

        SmartDashboard.putData("ManuelElevator", new ManuelElevator());


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        SmartDashboard.putData("SetElevatorHeight", new SetElevatorHeight(2));
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getDriver() {
        return driver;
    }

    public Joystick getCoDriver() {
        return coDriver;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

