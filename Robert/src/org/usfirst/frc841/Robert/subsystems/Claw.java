// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Robert.subsystems;

import java.util.Timer;
import java.util.TimerTask;

import org.usfirst.frc841.Robert.RobotMap;
import org.usfirst.frc841.Robert.commands.*;
import org.usfirst.frc841.Robert.lib.PIDLoop;
import org.usfirst.frc841.Robert.subsystems.Elevator.Update;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class Claw extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController clawMotor = RobotMap.clawClawMotor;
    AnalogInput clawAngleSensor = RobotMap.clawClawAngleSensor;
    DoubleSolenoid clawGrabber = RobotMap.clawClawGrabber;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    private double Y[] = {0,0,0};
  	private double X[] = {0,1,2};
  	private int period = 100; //mSec 
  	private double kp = 0;
  	private double ki = 0;
  	private double kd = 0;
  	private double Setpoint = 1;
  	private boolean EnablePID = false;
 
    
	 Timer ControllerTimer;
  	 PIDLoop cloop;
  	 
  	 public Claw () {
  		 cloop = new PIDLoop(X,Y);
    	 cloop.SetControllerDirection(true);
    	 cloop.SetOutputLimits(-1, 1);
    	 cloop.SetSampleTime((long) period);
    	 cloop.SetReference(3.25);
    	 cloop.SetTunings(kp, ki, kd);// PID Tuning values
    	 
    	 
    	 ControllerTimer = new Timer();
    	 ControllerTimer.schedule(new Update(this), 0L, period); // schedule PID
  	 }
  	class Update extends TimerTask{
	 	private Claw claw;
	    	
	    	public Update(Claw claw){
	    		this.claw = claw; 
	 
	    	}
			@Override
			public void run() {
				// TODO Auto-generated method stub
				if (claw.EnablePID){
					claw.cloop.SetTunings(claw.kp,claw.ki,claw.kd);
					claw.cloop.SetReference(Setpoint);
					claw.SetMotors(claw.cloop.Compute(claw.GetAngle()));
				}
			}
				
	 }
	
    public void updatePIDValues(double _kp,double _ki, double _kd){
     	kp = _kp;
     	ki = _ki;
     	kd = _kd;
     }
     public void enableControlLoop(){
     	EnablePID = true;
     }
     public void disableControlLoop(){
     	EnablePID = false;
     }
     public void SetGoal(double goal){
      	
      	Setpoint = goal;
      		
      }

    
    
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void openClaw() {
    	clawGrabber.set(DoubleSolenoid.Value.kReverse);
    
    }
    public void closeClaw() {
    	clawGrabber.set(DoubleSolenoid.Value.kForward);
    }
    public void SetMotors(double power) {
    	clawMotor.set(power);
    }
    public double GetAngle() {
    	return clawAngleSensor.getVoltage();
    }
}

