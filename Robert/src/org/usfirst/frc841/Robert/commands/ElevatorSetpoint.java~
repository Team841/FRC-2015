// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Robert.commands;

import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc841.Robert.Robot;

/**
 *
 */
public class  ElevatorSetpoint extends Command {
	Preferences prefs = Preferences.getInstance();
  	private double kp = 1.7;
  	private double ki = 0.01;
  	private double kd = 0.07;
  	private double Setpoint = 3.25;
  	
    public ElevatorSetpoint() {
    	
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.elevator);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	Robot.elevator.enableControlLoop();
      	
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Setpoint = prefs.getDouble("Setpoint", Setpoint);
      	prefs.putDouble("Setpoint", Setpoint);
      	kp = prefs.getDouble("kp", kp);
      	ki = prefs.getDouble("ki", ki);
      	kd = prefs.getDouble("kd", kd);
      	
    	Robot.elevator.SetGoal(Setpoint);
    	Robot.elevator.updatePIDValues(kp, ki, kd);
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    	Robot.elevator.disableControlLoop();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
