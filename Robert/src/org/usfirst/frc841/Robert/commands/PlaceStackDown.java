 // RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc841.Robert.commands;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class PlaceStackDown extends CommandGroup {
    
    public  PlaceStackDown() {
    	addSequential(new OpenPincer());
    	addSequential(new ReleaseTote());
    	addSequential(new SetElevatorHeight((1.92)));
    	addSequential(new WaitCommand(0.01));
    	addSequential(new SetElevatorHeight((1.54)));
    	addSequential(new WaitCommand(0.01));
    	addSequential(new SetElevatorHeight((1.16)));
    	addSequential(new WaitCommand(0.01));
    	addSequential(new SetElevatorHeight((0.8)));
    	addSequential(new WaitCommand(0.01));
    	addParallel(new SetElevatorHeight(0.44)); //bring all the way down
    	addSequential(new SetElevatorAngle(0.415));
    	addSequential(new HoldTote());
    	
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    	
    	//Open up intakes by calling Release tote command
    	//addParallel(new ReleaseTote());
    	//keep the elevator at 65 degs
    	//addSequential(new SetElevatorAngle( .233 ));
    	//Then, the elevator tilt to 90 degs
    	//addParallel(new SetElevatorAngle( .52 ));
    	//Then, move the carriage down to one tote level
    	//addSequential(new SetElevatorHeight(2));
    	//Also, move the carriage down to pick up level
    	//addSequential(new SetElevatorHeight(1));
    }
}
